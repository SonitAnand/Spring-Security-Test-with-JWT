Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.1.9.RELEASE</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.dragon</groupId>\r\n\t<artifactId>SpringBootTest</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>SpringBootTest</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\r\n\t<properties>\r\n\t\t<java.version>1.8</java.version>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-rest</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.h2database</groupId>\r\n\t\t\t<artifactId>h2</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision ef0292e9222373d18a6e290a7f75eeb02471154c)
+++ pom.xml	(date 1592145880261)
@@ -11,6 +11,7 @@
 	<groupId>com.dragon</groupId>
 	<artifactId>SpringBootTest</artifactId>
 	<version>0.0.1-SNAPSHOT</version>
+	<packaging>war</packaging>
 	<name>SpringBootTest</name>
 	<description>Demo project for Spring Boot</description>
 
@@ -34,6 +35,11 @@
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>io.jsonwebtoken</groupId>
+			<artifactId>jjwt</artifactId>
+			<version>0.9.1</version>
 		</dependency>
 		<dependency>
 			<groupId>com.h2database</groupId>
@@ -66,7 +72,31 @@
 				<groupId>org.springframework.boot</groupId>
 				<artifactId>spring-boot-maven-plugin</artifactId>
 			</plugin>
+			<plugin>
+				<groupId>org.sonarsource.scanner.maven</groupId>
+				<artifactId>sonar-maven-plugin</artifactId>
+				<version>3.6.0.1398</version>
+		        </plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<version>3.0.0-M3</version>
+				<dependencies>
+					<dependency>
+					    <groupId>org.apache.maven.plugins</groupId>
+					    <artifactId>maven-surefire-plugin</artifactId>
+					    <version>3.0.0-M3</version>
+					</dependency>
+				</dependencies>	
+		    </plugin>
 		</plugins>
 	</build>
+	<distributionManagement>
+	    <snapshotRepository>
+		    <id>Nexus Repository</id>
+		    <name>Internal Releases</name>
+		    <url>http://localhost:8081/repository/Sample_Test/</url>
+	    </snapshotRepository>
+	</distributionManagement>
 
-</project>
+</project>
\ No newline at end of file
Index: src/main/java/com/dragon/controller/ApplicationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dragon.controller;\r\n\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class ApplicationController {\r\n    @RequestMapping(value = \"/home\")\r\n    public String home(){\r\n        return \"Welcome Home\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/dragon/controller/ApplicationController.java	(revision ef0292e9222373d18a6e290a7f75eeb02471154c)
+++ src/main/java/com/dragon/controller/ApplicationController.java	(date 1592145724379)
@@ -1,12 +1,45 @@
 package com.dragon.controller;
 
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+import com.dragon.securityconfiguration.MyUserDetailsService;
+import com.dragon.util.JwtTokenUtil;
+import com.dragon.vo.AuthenticationRequest;
+import com.dragon.vo.AuthenticationResponse;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.web.bind.annotation.*;
 
 @RestController
 public class ApplicationController {
+
+    @Autowired
+    AuthenticationManager authenticationManager;
+
+    @Autowired
+    MyUserDetailsService myUserDetailsService;
+
+    JwtTokenUtil jwtTokenUtil;
+
     @RequestMapping(value = "/home")
     public String home(){
         return "Welcome Home";
     }
+
+    @RequestMapping(value = "/authenticate", method = RequestMethod.POST)
+    public ResponseEntity<?> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception {
+        try{
+            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationRequest.getUserName(),authenticationRequest.getUserPassword()));
+        }
+        catch (BadCredentialsException x){
+            throw new Exception("Incorrect user name and password");
+        }
+        final UserDetails userDetails = myUserDetailsService.loadUserByUsername(authenticationRequest.getUserName());
+
+        final String jwt = jwtTokenUtil.generateToken(userDetails);
+
+        return ResponseEntity.ok(new AuthenticationResponse(jwt));
+    }
 }
Index: src/main/java/com/dragon/util/JwtTokenUtil.java
===================================================================
--- src/main/java/com/dragon/util/JwtTokenUtil.java	(date 1592139544515)
+++ src/main/java/com/dragon/util/JwtTokenUtil.java	(date 1592139544515)
@@ -0,0 +1,53 @@
+package com.dragon.util;
+
+import com.sun.org.apache.xml.internal.security.algorithms.SignatureAlgorithm;
+import io.jsonwebtoken.Claims;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.io.Serializable;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.function.Function;
+
+public class JwtTokenUtil implements Serializable {
+
+    private String SECRET_KEY = "secret";
+    public static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;
+
+    public String extractUserName(String token){
+        return extractClaim(token,Claims::getSubject);
+    }
+
+    public String extractExpiration(String token){
+        return extractClaim(token,Claims::getExpiration);
+    }
+
+    public <T> T extractClaim(String token, Function<Claims,T> claimResolver){
+        final Claims claims = extractAllClaims(token);
+        return claimResolver.apply(claims);
+    }
+
+    private Claims extractAllClaims(String token){
+        return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getbody();
+    }
+
+    private Boolean isTokenExpired(String token) {
+        return extractExpiration(token).before(new Date());
+    }
+
+    public String generateToken(UserDetails userDetails){
+        Map<String,Object>  claims = new HashMap<>();
+        return createToken(claims, userDetails.getUsername());
+    }
+
+    private String createToken(Map<String, Object> claims, String subject) {
+        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
+                .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))
+                .signWith(SignatureAlgorithm.HS256, SECRET_KEY).compact();
+    }
+
+    public Boolean validateToken(String token, UserDetails userDetails) {
+        final String username = extractUserName(token);
+        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
+    }
+}
Index: src/main/java/com/dragon/vo/AuthenticationResponse.java
===================================================================
--- src/main/java/com/dragon/vo/AuthenticationResponse.java	(date 1592145975902)
+++ src/main/java/com/dragon/vo/AuthenticationResponse.java	(date 1592145975902)
@@ -0,0 +1,20 @@
+package com.dragon.vo;
+
+public class AuthenticationResponse {
+
+    private String jwtToken;
+
+    public AuthenticationResponse() {};
+
+    public AuthenticationResponse(String jwtToken) {
+        this.jwtToken = jwtToken;
+    }
+
+    public String getJwtToken() {
+        return jwtToken;
+    }
+
+    public void setJwtToken(String jwtToken) {
+        this.jwtToken = jwtToken;
+    }
+}
Index: src/main/java/com/dragon/vo/AuthenticationRequest.java
===================================================================
--- src/main/java/com/dragon/vo/AuthenticationRequest.java	(date 1592145822009)
+++ src/main/java/com/dragon/vo/AuthenticationRequest.java	(date 1592145822009)
@@ -0,0 +1,30 @@
+package com.dragon.vo;
+
+public class AuthenticationRequest {
+
+    private String userName;
+    private String userPassword;
+
+    public AuthenticationRequest() {};
+
+    public AuthenticationRequest(String userName, String userPassword) {
+        this.userName = userName;
+        this.userPassword = userPassword;
+    }
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+
+    public String getUserPassword() {
+        return userPassword;
+    }
+
+    public void setUserPassword(String userPassword) {
+        this.userPassword = userPassword;
+    }
+}
Index: src/main/java/com/dragon/securityconfiguration/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dragon.securityconfiguration;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationProvider;\r\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.core.userdetails.User;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\r\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider(){\r\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\r\n        daoAuthenticationProvider.setUserDetailsService(userDetailsService);\r\n        daoAuthenticationProvider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());\r\n        return daoAuthenticationProvider;\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception{\r\n        httpSecurity.authorizeRequests().antMatchers(\"/\",\"/home\").permitAll().anyRequest().authenticated()\r\n                .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\r\n    }\r\n\r\n    /*@Bean\r\n    @Override\r\n    protected UserDetailsService userDetailsService()\r\n    {\r\n        List<UserDetails> users = new ArrayList<UserDetails>();\r\n        users.add(User.withDefaultPasswordEncoder().username(\"Sonit\").password(\"1234\").roles(\"USER\").build());\r\n        users.add(User.withDefaultPasswordEncoder().username(\"Rohit\").password(\"1234\").roles(\"USER\").build());\r\n        return new InMemoryUserDetailsManager(users);\r\n    }*/\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/dragon/securityconfiguration/SecurityConfig.java	(revision ef0292e9222373d18a6e290a7f75eeb02471154c)
+++ src/main/java/com/dragon/securityconfiguration/SecurityConfig.java	(date 1592146022522)
@@ -1,21 +1,19 @@
 package com.dragon.securityconfiguration;
 
+import com.dragon.util.JwtRequestFilter;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
-import org.springframework.security.core.userdetails.User;
-import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.crypto.password.NoOpPasswordEncoder;
-import org.springframework.security.provisioning.InMemoryUserDetailsManager;
-
-import java.util.ArrayList;
-import java.util.List;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 
 @Configuration
 @EnableWebSecurity
@@ -23,6 +21,10 @@
 
     @Autowired
     private UserDetailsService userDetailsService;
+
+    @Autowired
+    JwtRequestFilter jwtRequestFilter;
+
     @Bean
     public AuthenticationProvider authenticationProvider(){
         DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
@@ -33,8 +35,15 @@
 
     @Override
     protected void configure(HttpSecurity httpSecurity) throws Exception{
-        httpSecurity.authorizeRequests().antMatchers("/","/home").permitAll().anyRequest().authenticated()
-                .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
+        httpSecurity.csrf().disable().authorizeRequests().antMatchers("/","/home","/authenticate").permitAll().anyRequest().authenticated()
+                .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
+        httpSecurity.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
+    }
+
+    @Override
+    @Bean
+    public AuthenticationManager authenticationManagerBean() throws Exception {
+        return super.authenticationManagerBean();
     }
 
     /*@Bean
Index: src/main/java/com/dragon/util/JwtRequestFilter.java
===================================================================
--- src/main/java/com/dragon/util/JwtRequestFilter.java	(date 1592144152348)
+++ src/main/java/com/dragon/util/JwtRequestFilter.java	(date 1592144152348)
@@ -0,0 +1,46 @@
+package com.dragon.util;
+
+import com.dragon.securityconfiguration.MyUserDetailsService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+public class JwtRequestFilter extends OncePerRequestFilter {
+
+    @Autowired
+    JwtTokenUtil jwtTokenUtil;
+
+    @Autowired
+    MyUserDetailsService myUserDetailsService;
+    @Override
+    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)
+            throws ServletException, IOException {
+
+        final String authorizationHeader = httpServletRequest.getHeader("Authorization");
+         String userName = null;
+         String jwt = null;
+         if(authorizationHeader !=null && authorizationHeader.startsWith("Bearer")){
+             jwt = authorizationHeader.substring(7);
+             userName = jwtTokenUtil.extractUserName(jwt);
+         }
+
+         if(userName != null && SecurityContextHolder.getContext().getAuthentication() == null){
+             UserDetails userDetails = this.myUserDetailsService.loadUserByUsername(userName);
+             if(jwtTokenUtil.validateToken(jwt,userDetails)){
+                 UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());
+                 usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(httpServletRequest));
+                 SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
+             }
+         }
+        filterChain.doFilter(httpServletRequest,httpServletResponse);
+    }
+}
